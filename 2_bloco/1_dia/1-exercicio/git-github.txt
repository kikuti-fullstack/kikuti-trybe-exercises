Linux Instalação:

sudo apt-get install git-all


Configurar identidade:

git config --global user.name "Seu nome"
git config --global user.email seuemail@exemplo.br


Escolher editor padrão:

git config --global core.editor "code --wait"


Adicionando chave SSH:

ssh-keygen -t rsa -b 4096 -C "seuemail@gmail.com"


Adicionando chave SSH ao ssh-agent

eval "$(ssh-agent -s)"

ssh-add ~/.ssh/id_rsa


Adicionando chave SSH ao github
(obs: o xclip ele só vai copiar a chave SSH sem precisar abrir o arquivo)

sudo apt-get install xclip
xclip -sel clip < ~/.ssh/id_rsa.pub

--- ou ---

obs: da pra fazer assim também e copiar a chave SSH
{cat ~/.ssh/id_rsa.pub}


Associando ao github:

- Settings
-SSH and GPG keys
- New SSH key
- Adicione um título qualquer e coloque a chave dentro do campo key
- Clique em add SSH key


Iniciando repositório local:

git init


Adicionando e commitando:

git add arquivo
git commit -m "mensagem"


Conectando o repositório local com o remoto:

git remote add origin chave-ssh
-- ou --
git remote add origin link-https


Sincronizando os repositórios:
obs: jogar as alterações do local pro remoto

git push origin master


PADRÃO PARA CRIAÇÃO DE REPOSITÓRIOS:
(RECOMENDADO)

/home/usuário/Github/trybe-exercises/1_bloco/1_dia/1-exercicio

Explicando de maneira simples:

Github - diretório que vai guardar todos os projetos
trybe-exercises - diretório a ser versionado
1_bloco - diretório que vai guardar todos os dias do bloco.
1_dia - diretório que vai guardar todos os exercícios do dia.
1-exercicio - diretório que vai guardar o primeiro exercício do dia

Recomendação:

1_bloco - criar um novo toda vez que mudar de bloco, por exemplo 2_bloco
1_dia - criar um novo toda vez que mudar de dia, por exemplo 2_dia
1-exercicios - criar um novo toda vez que resolver um exercício, por exemplo 2-exercicio


Clonando um repositório:

git clone urlDoSeuRepositórioTrybeExercises


Criando um PR (pull request):

- Acesse seu repositório remoto
- clique em "pull requests"
- clique em "new pull request"
- selecione a branch que você quer dar o pull request, sendo:

a primeira: vai receber os dados.
a segunda: vai mandar os dados.


Vendo o registro de commits:

git log


Code review:

é basicamente você olhar o código de aguentar e fazer uma revisão, pode até apontar erros no código.


Declarando aonde o git push vai ser feito:
obs: só é necessário fazer isso apenas 1 vez, depois de declarado você só precisa dar git push

git push -u origin nome-da-branch